# Issuer's public key (must be a SECP256K1 key)
issuing_address=<Your Casper address>
# Target public key for the transfer transaction (unlike Bitcoin and Ethereum, a transfer can't be made to a dead address). This should be a public key you own so you still control any CSPR sent.
target_address=<Your other Casper address>

# Issuer URL / DID as the verification method. 
# For testing you can use the issuer DID for the example credential in this repository: did:example:23adb1f712ebc6f1c276eba4dfa
verification_method = <verification-method>

# Put your unsigned certificates here for signing. Defaults to <project-base>/data/unsigned_certificates
# unsigned_certificates_dir=<path-to-your-unsigned-certificates>
# Final blockchain certificates output. Defaults to <project-base>/data/unsigned_certificates
# blockchain_certificates_dir=<path-to-your-blockchain-certificates>
# Where to store intermediate files, for debugging and checkpointing. Defaults to <project-base>/work
# work_dir=<path-to-your-workdir>
work_dir=data/work

# For security reasons, a USB may be inserted and removed during the standard certficate issuing process.
# For testing purposes, to use the data folder in this directory, use this setting: usb_name=data
usb_name=</Volumes/path-to-usb/>
# Issuer's private key file (relative to usb_name path). You can get this file from your CasperLabs Signer.
key_file=<file-you-saved-pk-to.pem>

chain = <casper_mainnet|casper_testnet>

# Choose one of the following when using a Casper RPC node for issuing (comment out the other one)
casper_rpc_ip_address=<casper-mainnet-rpc-node-ip-address>
caspertest_rpc_ip_address=<casper-testnet-rpc-node-ip-address>

# This skips checking whether the WiFi is on while accessing the private key. Used for testing.
no_safe_mode